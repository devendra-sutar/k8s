#!/bin/bash

# Custom values for configuration
OMEGA="omega"
IP="http://10.0.34.144:9090"
LOKI_HOST="http://10.0.34.147:3100"
TEMPO_HOST="http://10.0.34.193:3200"
API_ENDPOINT="https://10.0.34.181:8000/api/v1/agents/"
ALLOY_PORT=8080

# Log function
log() {
    echo "[LOG] $1"
}

# Step 1: Install kubectl
log "Downloading the latest stable release of kubectl..."
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

log "Making kubectl binary executable..."
chmod +x kubectl

log "Moving kubectl to /usr/local/bin..."
sudo mv kubectl /usr/local/bin/

log "Verifying kubectl installation..."
if ! command -v kubectl &> /dev/null; then
    log "kubectl installation failed. Please check the installation steps."
    exit 1
else
    log "kubectl is installed successfully."
    kubectl version --client=true
fi

# Step 2: Install prerequisites for Helm
log "Installing prerequisites for Helm..."
sudo apt-get install -y apt-transport-https curl tar

# Step 3: Install Helm
log "Downloading Helm v3.12.0..."
curl -fsSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz -o helm.tar.gz
tar -zxvf helm.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/helm
rm -rf linux-amd64 helm.tar.gz

log "Verifying Helm installation..."
if ! command -v helm &> /dev/null; then
    log "Helm installation failed. Please check the installation steps."
    exit 1
else
    log "Helm is installed successfully."
    helm version --short
fi

# Step 4: Prepare namespace and Helm repository
log "Creating namespace 'alloy'..."
kubectl create namespace alloy || log "Namespace 'alloy' already exists."

log "Adding the Grafana Helm chart repository..."
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

# Step 5: Modify the Helm values.yml file
log "Fetching default values.yml file for configuration..."
helm show values grafana/k8s-monitoring > values.yml

log "Modifying values.yml file..."
sed -i -e "s/name: \"\"/name: \"$OMEGA\"/" \
       -e "s/host: \"\"/host: \"$IP\"/" \
       -e "s/host: \"\"/host: \"$LOKI_HOST\"/" \
       -e "s/host: \"\"/host: \"$TEMPO_HOST\"/" \
       -e "s/enabled: false/enabled: true/g" values.yml

# Append Grafana admin credentials
log "Adding Grafana admin credentials..."
cat <<EOL >> values.yml
grafana:
  admin:
    username: admin
    password: admin
EOL

# Step 6: Install Helm chart
log "Installing Grafana monitoring stack with Helm..."
helm install -n alloy grafana-k8s-monitoring grafana/k8s-monitoring -f values.yml

# Step 7: Verify installation
log "Final verification of kubectl and Helm versions..."
kubectl version --client=true
helm version --short

log "Listing pods in the 'alloy' namespace..."
kubectl get pods -n alloy

# Step 8: Create new agent
HOST_IP=$(hostname -I | awk '{print $1}')
AGENT_NAME="$OMEGA-agent"

log "Creating new agent in the API..."
response=$(curl -k -s -w "\n%{http_code}" -X POST "$API_ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{
        "host_name": "'"$HOSTNAME"'",
        "ip_port": "'"$HOST_IP:$ALLOY_PORT"'",
        "keycloak_id": "'"$OMEGA"'",
        "agent_name": "'"$AGENT_NAME"'",
        "status": "Active"
    }')

http_code=$(echo "$response" | tail -n1)
body=$(echo "$response" | sed '$d')

log "Response Code: $http_code"
log "Response Body: $body"

# Handle different response codes
case "$http_code" in
    201)
        log "Agent created successfully."
        ;;
    400)
        log "Bad Request: Check the data sent to the API."
        ;;
    401)
        log "Unauthorized: Authentication failed. Check the API credentials."
        ;;
    500)
        log "Server error: The API endpoint is likely down."
        ;;
    *)
        if [[ "$body" == *"UNIQUE constraint failed"* ]]; then
            log "ERROR: IP:PORT combination already exists."
        else
            log "Agent creation failed. Response code: $http_code"
            log "Full response body: $body"
        fi
        ;;
esac

# Step 9: Verify all necessary pods are running
log "Verifying that all necessary pods are running..."
kubectl get pods -n alloy
