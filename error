#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status

# Function to log messages
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Install kubectl
install_kubectl() {
    if ! command -v kubectl &>/dev/null; then
        log "kubectl not found. Installing..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        log "kubectl installed successfully."
    else
        log "kubectl is already installed."
    fi
}

# Install Helm
install_helm() {
    if ! command -v helm &>/dev/null; then
        log "Helm not found. Installing..."
        sudo apt-get update -y
        sudo apt-get install -y apt-transport-https
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        log "Helm installed successfully."
    else
        log "Helm is already installed."
    fi
}

# Start Minikube and set KUBECONFIG
start_minikube() {
    if ! command -v minikube &>/dev/null; then
        log "Minikube not found. Please install Minikube first."
        exit 1
    fi

    log "Starting Minikube..."
    minikube start

    log "Setting KUBECONFIG to Minikube's kubeconfig..."
    export KUBECONFIG=$(minikube kubeconfig)
}

# Create namespace for monitoring stack
create_namespace() {
    kubectl create namespace alloy || log "Namespace alloy already exists."
}

# Add Helm repo and update
add_helm_repo() {
    helm repo add grafana https://grafana.github.io/helm-charts
    helm repo update
}

# Fetch and modify values.yaml
configure_values_file() {
    helm show values grafana/k8s-monitoring > values.yaml

    log "Updating values.yaml with custom endpoints and configurations..."

    # Update Prometheus host
    log "Updating Prometheus host..."
    yq e '.prometheus.host = "http://10.0.34.144:9090"' -i values.yaml

    # Update Loki host
    log "Updating Loki host..."
    yq e '.loki.host = "http://10.0.34.147:3100"' -i values.yaml

    # Update Tempo host
    log "Updating Tempo host..."
    yq e '.tempo.host = "http://10.0.34.193:3200"' -i values.yaml

    # Update protocol to "remote_write"
    log "Updating protocol..."
    yq e '.protocol = "remote_write"' -i values.yaml

    # Enable required components
    log "Enabling required components..."
    yq e '.metrics.enabled = true' -i values.yaml
    yq e '.logs.enabled = true' -i values.yaml
    yq e '.pod_logs.enabled = true' -i values.yaml
    yq e '.Cost.enabled = true' -i values.yaml
    yq e '.Kepler.enabled = true' -i values.yaml
    yq e '.node-exporter.enabled = true' -i values.yaml
    yq e '.cluster_events.enabled = true' -i values.yaml
    yq e '.Opencost.enabled = true' -i values.yaml
    yq e '.kube-state-metrics.enabled = true' -i values.yaml
    yq e '.prometheus-node-exporter.enabled = true' -i values.yaml
    yq e '.prometheus-operator-crds.enabled = true' -i values.yaml

    log "values.yaml updated successfully."
}

# Deploy Grafana Alloy monitoring stack
deploy_stack() {
    helm install -n alloy grafana-k8s-monitoring grafana/k8s-monitoring -f values.yaml
}

# Verify deployment
verify_deployment() {
    kubectl get pods -n alloy
}

# Main function to execute steps
main() {
    log "Starting Grafana Alloy monitoring setup..."
    install_kubectl
    install_helm
    start_minikube   # Start Minikube and set KUBECONFIG
    create_namespace
    add_helm_repo
    configure_values_file
    deploy_stack
    verify_deployment
    log "Grafana Alloy monitoring stack deployment completed."
}

# Run the main function
main
