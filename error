#!/bin/bash

# Configuration Variables
OMEGA="omega"
PROMETHEUS_URL="http://10.0.34.144:9090"
LOKI_URL="http://10.0.34.147:3100"
TEMPO_URL="http://10.0.34.193:3200"
VALUES="values.yml"
NAMESPACE="alloy"

# 1. Install kubectl if not installed
echo "Checking if kubectl is installed..."
if ! command -v kubectl &> /dev/null
then
    echo "kubectl not found, installing..."
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    echo "kubectl installed successfully"
else
    echo "kubectl is already installed"
fi

# 2. Install Helm if not installed
echo "Checking if Helm is installed..."
if ! command -v helm &> /dev/null
then
    echo "Helm not found, installing..."
    sudo apt-get install apt-transport-https -y
    curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    echo "Helm installed successfully"
else
    echo "Helm is already installed"
fi

# 3. Ensure kubectl is configured
echo "Checking kubectl configuration..."
kubectl version --client || { echo "kubectl is not configured correctly."; exit 1; }

# 4. Create a namespace for monitoring (alloy)
echo "Creating namespace alloy..."
kubectl create namespace $NAMESPACE || echo "Namespace alloy already exists"

# 5. Add Grafana Helm repository and update
echo "Adding Grafana Helm chart repository..."
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

# 6. Fetch default values.yml from Grafana Helm chart
echo "Fetching default values.yml from Grafana Helm chart..."
helm show values grafana/k8s-monitoring > $VALUES

# 7. Modify values.yml to update Prometheus, Loki, Tempo, OpenCost, and other settings
echo "Modifying values.yml for custom configurations..."

# Update Prometheus, Loki, Tempo, and OpenCost URLs
sed -i "/prometheus:/,/^ *queryEndpoint:/s|queryEndpoint: \"\"|queryEndpoint: \"$PROMETHEUS_URL/api/v1/query\"|" "$VALUES"
sed -i "/prometheus:/,/^ *scrapeInterval:/s/scrapeInterval: \"\"/scrapeInterval: \"15s\"/" "$VALUES"
sed -i "/prometheus:/,/^ *enabled:/s/false/true/" "$VALUES"

sed -i "/loki:/,/^ *host:/s/host: \"\"/host: \"$LOKI_URL\"/" "$VALUES"
sed -i "/tempo:/,/^ *host:/s/host: \"\"/host: \"$TEMPO_URL\"/" "$VALUES"

# Enable OpenCost and configure Prometheus
sed -i "/opencost:/,/^ *enabled:/s/false/true/" "$VALUES"
sed -i "/opencost:/,/^ *prometheus:/s|url: \"\"|url: \"$PROMETHEUS_URL\"|" "$VALUES"
# Ensure only one of the Prometheus setups is enabled
sed -i '/opencost:/,/prometheus:/s/# in:/# in:\n#   scrapeInterval: "15s"\n#   scrapeTimeout: "10s"/' "$VALUES"
sed -i '/opencost:/,/prometheus:/s/# amp:/# amp:\n#   apiUrl: "http:\/\/prometheus-service.monitoring.svc.cluster.local:9090"/' "$VALUES"

# Enable additional components in values.yml
sed -i "/kepler:/,/^ *enabled: false/s/false/true/" "$VALUES"
sed -i "/node-exporter:/,/^ *enabled: false/s/false/true/" "$VALUES"
sed -i "/cluster_events:/,/^ *enabled: false/s/false/true/" "$VALUES"
sed -i "/kube-state-metrics:/,/^ *enabled: false/s/false/true/" "$VALUES"
sed -i "/prometheus-node-exporter:/,/^ *enabled: false/s/false/true/" "$VALUES"
sed -i "/prometheus-operator-crds:/,/^ *enabled: false/s/false/true/" "$VALUES"

# 8. Install Grafana Monitoring Stack using Helm
echo "Installing Grafana Monitoring Stack using Helm..."
helm install -n $NAMESPACE grafana-k8s-monitoring grafana/k8s-monitoring -f $VALUES
if [ $? -ne 0 ]; then
    echo "Error: Grafana installation failed. Please check the values.yml file for issues."
    exit 1
fi

# 9. Verify if Grafana pods are running in the alloy namespace
echo "Verifying Grafana pods in the alloy namespace..."
kubectl get pods -n $NAMESPACE

# 10. Provide access instructions for Grafana
echo "Access Grafana at http://<grafana-server-ip>:3000. Default credentials: admin/admin."

# 11. Set up Kubernetes Dashboards in Grafana
echo "Setting up Kubernetes dashboards in Grafana..."
# These dashboards should be manually imported in Grafana
# Instructions: Navigate to Dashboards > Import > Select prebuilt Kubernetes dashboards
echo "Import prebuilt Kubernetes dashboards and link to the correct data sources (Prometheus, Loki, Tempo)."

# Final message
echo "Script completed successfully!"
