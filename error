#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status

# Function to log messages
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Automatically set KUBECONFIG
setup_kubeconfig() {
    if [ -z "$KUBECONFIG" ]; then
        DEFAULT_KUBECONFIG="$HOME/.kube/config"
        if [ -f "$DEFAULT_KUBECONFIG" ]; then
            export KUBECONFIG="$DEFAULT_KUBECONFIG"
            log "KUBECONFIG is not set. Automatically setting it to $DEFAULT_KUBECONFIG."
        else
            log "Kubeconfig file not found at $DEFAULT_KUBECONFIG. Please ensure it exists."
            exit 1
        fi
    else
        log "KUBECONFIG is already set to $KUBECONFIG."
    fi
}

# Test kubectl connectivity
test_kubectl() {
    log "Testing kubectl connectivity..."
    if kubectl cluster-info &>/dev/null; then
        log "Successfully connected to the Kubernetes cluster."
    else
        log "Failed to connect to the Kubernetes cluster. Please check your configuration."
        exit 1
    fi
}

# Check and install yq if not present
check_and_install_yq() {
    if ! command -v yq &>/dev/null; then
        log "yq not found. Installing..."
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
    fi
    log "yq is installed and ready to use."
}

# Fetch and configure values.yaml
configure_values_file() {
    local values_file="values.yaml"
    log "Fetching default values.yaml for Grafana k8s-monitoring..."
    helm show values grafana/k8s-monitoring > "$values_file"

    if [[ ! -f "$values_file" ]]; then
        log "Failed to fetch values.yaml. Exiting."
        exit 1
    fi

    log "Updating custom endpoints in values.yaml..."
    yq eval '.prometheus.host = "http://10.0.34.144:9090"' -i "$values_file" || log "Failed to update prometheus.host"
    yq eval '.loki.host = "http://10.0.34.147:3100"' -i "$values_file" || log "Failed to update loki.host"
    yq eval '.tempo.host = "http://10.0.34.193:3200"' -i "$values_file" || log "Failed to update tempo.host"
    yq eval '.tempo.hostname = "omega-tempo-dev"' -i "$values_file" || log "Failed to update tempo.hostname"
    yq eval '.tempo.protocol = "remote_write"' -i "$values_file" || log "Failed to update tempo.protocol"

    log "Enabling metrics, logs, and pod logs collection in values.yaml..."
    yq eval '.metrics.enabled = true' -i "$values_file" || log "Failed to enable metrics"
    yq eval '.logs.enabled = true' -i "$values_file" || log "Failed to enable logs"
    yq eval '.pod_logs.enabled = true' -i "$values_file" || log "Failed to enable pod logs"

    log "Enabling additional components: Cost, Kepler, etc..."
    yq eval '.Cost.enabled = true' -i "$values_file" || log "Failed to enable Cost"
    yq eval '.Kepler.enabled = true' -i "$values_file" || log "Failed to enable Kepler"
    yq eval '.node-exporter.enabled = true' -i "$values_file" || log "Failed to enable node-exporter"
    yq eval '.cluster_events.enabled = true' -i "$values_file" || log "Failed to enable cluster_events"
    yq eval '.Opencost.enabled = true' -i "$values_file" || log "Failed to enable Opencost"
    yq eval '.kube-state-metrics.enabled = true' -i "$values_file" || log "Failed to enable kube-state-metrics"
    yq eval '.prometheus-node-exporter.enabled = true' -i "$values_file" || log "Failed to enable prometheus-node-exporter"
    yq eval '.prometheus-operator-crds.enabled = true' -i "$values_file" || log "Failed to enable prometheus-operator-crds"

    log "values.yaml updated successfully with OMEGA Tempo configuration."
}

# Deploy the monitoring stack using Helm
deploy_monitoring_stack() {
    local namespace="alloy"
    local values_file="values.yaml"

    log "Deploying Grafana k8s-monitoring stack to namespace $namespace..."
    helm install -n "$namespace" grafana-k8s-monitoring grafana/k8s-monitoring -f "$values_file"
}

# Verify deployment
verify_deployment() {
    local namespace="alloy"
    log "Verifying deployment in namespace $namespace..."
    kubectl get pods -n "$namespace"
    log "Note: The OpenCost pod may not run initially as it requires additional configuration. Please configure OpenCost separately for cost management."
}

# Main function
main() {
    setup_kubeconfig
    test_kubectl
    check_and_install_yq
    configure_values_file
    deploy_monitoring_stack
    verify_deployment
    log "Grafana monitoring stack setup with OMEGA Tempo completed successfully."
}

# Run the script
main
