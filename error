#!/bin/bash

# Configuration Variables
OMEGA="omega"
IP="http://10.0.34.144:9090"
LOKI_HOST="http://10.0.34.147:3100"
TEMPO_HOST="http://10.0.34.193:3200"
TRUE="true"
ENDPOINT="/api/vl/write"
VALUES="values.yml"
NAMESPACE="alloy"

# Check if kubectl is installed
echo "Checking if kubectl is installed..."
if ! command -v kubectl &> /dev/null
then
    echo "kubectl not found, installing..."
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    echo "kubectl installed successfully"
else
    echo "kubectl is already installed"
fi

# Check if helm is installed
echo "Checking if Helm is installed..."
if ! command -v helm &> /dev/null
then
    echo "Helm not found, installing..."
    sudo apt-get install apt-transport-https -y
    curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    echo "Helm installed successfully"
else
    echo "Helm is already installed"
fi

# Check if kubectl is configured properly
echo "Checking if kubectl is configured..."
kubectl version --client || { echo "kubectl is not configured correctly"; exit 1; }

# Create namespace alloy
echo "Creating namespace alloy..."
kubectl create namespace $NAMESPACE || echo "Namespace alloy already exists"

# Add Grafana Helm repo and update
echo "Adding Grafana Helm chart repository..."
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
echo "Grafana Helm repo added and updated successfully"

# Fetch default values.yml from Grafana Helm chart
echo "Fetching default values.yml from Grafana Helm chart..."
helm show values grafana/k8s-monitoring > $VALUES

# Modify values.yml for Prometheus, Loki, Tempo, and OpenCost endpoints
echo "Modifying values.yml for Prometheus, Loki, Tempo, and OpenCost..."
sed -i "/prometheus:/,/^ *enabled:/s/host: \"\"/host: \"$IP\"/" "$VALUES"
sed -i "/prometheus:/,/^ *queryEndpoint:/s|queryEndpoint: \"\"|queryEndpoint: \"$IP/api/v1/query\"|" "$VALUES"
sed -i "/prometheus:/,/^ *scrapeInterval:/s/scrapeInterval: \"\"/scrapeInterval: \"15s\"/" "$VALUES"

sed -i "/loki:/,/^ *host:/s/host: \"\"/host: \"$LOKI_HOST\"/" "$VALUES"

sed -i "/tempo:/,/^ *host:/s/host: \"\"/host: \"$TEMPO_HOST\"/" "$VALUES"

# Enable and configure OpenCost in values.yml
sed -i "/opencost:/,/^ *enabled:/s/false/true/" "$VALUES"
sed -i "/opencost:/,/^ *prometheus:/s/host: \"\"/host: \"$IP\"/" "$VALUES"
sed -i "/opencost:/,/^ *prometheus:/s|url: \"\"|url: \"$IP\"|" "$VALUES"

# Enable required components in values.yml
echo "Enabling required components in values.yml..."
sed -i "/traces:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/kepler:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/node-exporter:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/cluster_events:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/kube-state-metrics:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/prometheus-node-exporter:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"
sed -i "/prometheus-operator-crds:/,/^ *enabled: false/s/false/$TRUE/" "$VALUES"

# Install Grafana Monitoring Stack using Helm
echo "Installing Grafana Monitoring Stack using Helm..."
helm install -n $NAMESPACE grafana-k8s-monitoring grafana/k8s-monitoring -f $VALUES
if [ $? -ne 0 ]; then
    echo "Error: Grafana installation failed. Please check the values.yml file for issues."
    exit 1
fi

# Verify if Grafana pods are running in the alloy namespace
echo "Verifying Grafana pods in the alloy namespace..."
kubectl get pods -n $NAMESPACE || { echo "Error: Could not verify pods."; exit 1; }

# Provide access instructions for Grafana
echo "Access Grafana at http://<grafana-server-ip>:3000. Default credentials: admin/admin."

# Set up Kubernetes Dashboards in Grafana
echo "Setting up Kubernetes dashboards in Grafana..."
# Here we assume Grafana's Dashboards are pre-configured or will be imported manually

# Final message
echo "Script completed successfully!"
