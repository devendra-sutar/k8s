apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "alloy-agent.fullname" . }}
  labels:
    {{- include "alloy-agent.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "alloy-agent.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "alloy-agent.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
        - name: install-curl
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              apt-get update && apt-get install -y curl
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: API_ENDPOINT
              value: {{ .Values.apiEndpoint | quote }}
            - name: ALLOY_CONFIG_URL
              value: {{ .Values.alloyConfigUrl | quote }}
            - name: ALLOY_PORT
              value: "{{ .Values.alloyPort }}"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OMEGA_UID
              value: {{ .Values.env.omegaUid | quote }}
            - name: AGENT_NAME
              value: {{ .Values.env.agentName | quote }}
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              HOST_IP=$(hostname -I | awk '{print $1}')
              response=$(curl -k -v -s -w "\n%{http_code}" -X POST "$API_ENDPOINT" \
                  -H "Content-Type: application/json" \
                  -d '{
                      "host_name": "'"$HOSTNAME"'",
                      "ip_port": "'"$HOST_IP:$ALLOY_PORT"'",
                      "keycloak_id": "'"$OMEGA_UID"'",
                      "agent_name": "'"$AGENT_NAME"'",
                      "status": "Active"
                  }')
              http_code=$(echo "$response" | tail -n1)
              body=$(echo "$response" | sed '$d')
              if [[ "$http_code" == "201" ]]; then
                echo "Agent created successfully."
              else
                echo "Agent creation failed. Response: $body"
              fi
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

helm install alloy-agent ./alloy-agent --set env.omegaUid="your-omega-uid" --set env.agentName="your-agent-name"


root@omega-dev-test:/home/ubuntu# helm install alloy-agent ./alloy-agent --set env.omegaUid="310b297d-29c9-4407-9506-e7bc5e7fbf46" --set env.agentName="kubernetes"
NAME: alloy-agent
LAST DEPLOYED: Thu Dec 26 09:44:36 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=alloy-agent,app.kubernetes.io/instance=alloy-agent" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
root@omega-dev-test:/home/ubuntu# kubectl get pos
error: the server doesn't have a resource type "pos"
root@omega-dev-test:/home/ubuntu# kubectl get pod
NAME                          READY   STATUS             RESTARTS      AGE
alloy-agent-84f66db69-vjv2t   0/1     CrashLoopBackOff   2 (24s ago)   45s





helm upgrade alloy-agent ./alloy-agent --set env.omegaUid="310b297d-29c9-4407-9506-e7bc5e7fbf46" --set env.agentName="Linux"
