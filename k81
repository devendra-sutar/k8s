#!/bin/bash

# Custom values for configuration
OMEGA="omega"
IP="http://10.0.34.144:9090"
LOKI_HOST="http://10.0.34.147:3100"
TEMPO_HOST="http://10.0.34.193:3200"

# Step 1: Install kubectl

echo "Downloading the latest stable release of kubectl..."
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

# Step 2: Make kubectl binary executable
echo "Making kubectl binary executable..."
chmod +x kubectl

# Step 3: Move kubectl to /usr/local/bin to make it available system-wide
echo "Moving kubectl to /usr/local/bin..."
sudo mv kubectl /usr/local/bin/

# Step 4: Verify kubectl installation
echo "Verifying kubectl installation..."
if ! command -v kubectl &> /dev/null
then
    echo "kubectl installation failed. Please check the installation steps."
    exit 1
else
    echo "kubectl is installed successfully."
    kubectl version --client=true
fi

# Step 5: Install prerequisites for Helm
echo "Installing prerequisites for Helm..."
sudo apt-get install apt-transport-https -y

# Step 6: Install Helm (v3 or later)
echo "Installing Helm..."
curl -fsSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz -o helm.tar.gz
tar -zxvf helm.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/helm

# Step 7: Verify Helm installation
echo "Verifying Helm installation..."
if ! command -v helm &> /dev/null
then
    echo "Helm installation failed. Please check the installation steps."
    exit 1
else
    echo "Helm is installed successfully."
    helm version --short
fi

# Step 8: Create a namespace for the monitoring stack
echo "Creating namespace 'alloy'..."
kubectl create namespace alloy || echo "Namespace 'alloy' already exists."

# Step 9: Add the official Grafana Helm chart repository
echo "Adding the Grafana Helm chart repository..."
helm repo add grafana https://grafana.github.io/helm-charts

# Step 10: Update the Helm chart repository cache
echo "Refreshing Helm chart repository cache..."
helm repo update

# Step 11: Scrape the default values.yml file for configuration
echo "Scraping the default values.yml file..."
helm show values grafana/k8s-monitoring > values.yml

# Step 12: Open values.yml file and modify configuration settings
echo "Modifying values.yml file..."

# Set custom cluster name
echo "Setting custom cluster name to '$OMEGA'..."
sed -i '/cluster:/,/^ *name:/s/name: ""/name: "$OMEGA"/' values.yml

# Set custom Prometheus endpoint
echo "Setting custom Prometheus endpoint to '$IP'..."
sed -i '/prometheus:/,/^ *host:/s/host: ""/host: "$IP"/' values.yml

# Set custom Loki endpoint
echo "Setting custom Loki endpoint to '$LOKI_HOST'..."
sed -i '/loki:/,/^ *host:/s/host: ""/host: "$LOKI_HOST"/' values.yml

# Set custom Tempo endpoint
echo "Setting custom Tempo endpoint to '$TEMPO_HOST'..."
sed -i '/tempo:/,/^ *host:/s/host: ""/host: "$TEMPO_HOST"/' values.yml

# Enable metrics, logs, and traces collection
echo "Enabling metrics, logs, and traces collection..."
sed -i '/metrics:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml
sed -i '/logs:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml
sed -i '/traces:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable additional components if not already enabled
echo "Enabling additional components (Cost, Kepler, node-exporter, etc.)..."

# Enable Cost
sed -i '/cost:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable Kepler
sed -i '/kepler:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable node-exporter
sed -i '/node-exporter:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable cluster_events
sed -i '/cluster_events:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable Opencost
sed -i '/opencost:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable kube-state-metrics
sed -i '/kube-state-metrics:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable prometheus-node-exporter
sed -i '/prometheus-node-exporter:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Enable prometheus-operator-crds
sed -i '/prometheus-operator-crds:/,/^ *enabled:/s/enabled: false/enabled: true/' values.yml

# Step 13: Install Helm chart with the modified values.yml file
echo "Installing Helm chart with the modified values.yml..."
sudo helm install -n alloy grafana-k8s-monitoring grafana/k8s-monitoring -f values.yml

# Step 14: Create a Kubernetes secret with username and password (both set to 'admin')
echo "Creating Kubernetes secret with username and password 'admin'..."
kubectl create secret generic grafana-admin-secret -n alloy \
    --from-literal=username=admin \
    --from-literal=password=admin

# Step 15: Final verification
echo "Final verification of kubectl and Helm versions..."
kubectl version --client=true
helm version --short

# Step 16: Verify that all necessary pods (Prometheus node exporter, Loki, Tempo) are running without issues
echo "Verifying that all necessary pods (Prometheus node exporter, Loki, Tempo) are running without issues..."
kubectl get pods -n alloy

echo "kubectl and Helm are installed, 'alloy' namespace is created, Grafana Helm chart repository is added and updated, the monitoring stack is installed successfully, and all necessary pods are verified."
